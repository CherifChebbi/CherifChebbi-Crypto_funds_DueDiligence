# QA_rag_pipeline.py

from QA_model import call_sambanova
from QA_vector_store import build_context_from_query
import time

def build_prompt(context: str, question: str) -> str:
    """
    Construit un prompt clair et structur√© √† partir du contexte et de la question.
    """
    prompt = f"""You are a due diligence assistant. Answer the user's question strictly based on the provided context.
If the context does not contain enough information, respond with: "I don't know based on the provided documents."

Context:
{context}

Question:
{question}

Answer:"""
    return prompt

def sliding_window_context(context: str, max_tokens: int = 512) -> str:
    """
    D√©coupe le contexte en segments plus petits si n√©cessaire pour √©viter de d√©passer la limite du mod√®le.
    """
    tokens = context.split()  # S√©parer le contexte en tokens
    context_chunks = []
    while tokens:
        context_chunk = " ".join(tokens[:max_tokens])
        context_chunks.append(context_chunk)
        tokens = tokens[max_tokens:]  # Enlever les tokens d√©j√† utilis√©s
    return "\n---\n".join(context_chunks)  # Retourner le contexte d√©coup√©

def answer_question_with_rag(question: str) -> str:
    """
    Effectue une r√©ponse √† la question via RAG : contexte + g√©n√©ration
    """
    print(f"\n‚ùì Question re√ßue : {question}")
    
    # √âtape 1 : Retrieve context
    context = build_context_from_query(question)
    print("üîç Contexte extrait des chunks FAISS.")

    # √âtape 2 : G√©rer le contexte si n√©cessaire
    context = sliding_window_context(context)
    print("‚úçÔ∏è Contexte d√©coup√© en morceaux si n√©cessaire.")

    # √âtape 3 : Formate le prompt
    prompt = build_prompt(context, question)
    print("‚úçÔ∏è Prompt construit.")

    # √âtape 4 : G√©n√®re la r√©ponse avec SambaNova
    response = None
    retry_attempts = 5
    for attempt in range(retry_attempts):
        response = call_sambanova(prompt)
        if response:
            break
        else:
            print("‚ö†Ô∏è Erreur lors de l'appel √† l'API. Tentative de nouvelle g√©n√©ration...")
            time.sleep(2 ** attempt)  # Exponentially increasing delay (ex: 2, 4, 8... seconds)

    if response:
        print("‚úÖ R√©ponse g√©n√©r√©e.")
        return response.strip()
    else:
        print("‚ö†Ô∏è Erreur lors de la g√©n√©ration apr√®s plusieurs tentatives.")
        return "An error occurred while generating the answer."


def test_sambanova_integration():
    """
    Teste l'int√©gration avec l'API Sambanova.
    """
    test_prompt = "What is the capital of France?"
    print("üîÑ Test de l'int√©gration avec Sambanova...")
    response = call_sambanova(test_prompt)
    print(f"R√©ponse g√©n√©r√©e : {response}")
    if not response:
        print("‚ö†Ô∏è Erreur avec Sambanova.")
    else:
        print("‚úÖ Sambanova fonctionne correctement.")


# Test de l'int√©gration avec Sambanova
test_sambanova_integration()
